<link rel="stylesheet" href="https://contribua.org/comoecampina-static/imgs/fonts/cg.css">

<link rel="stylesheet" href="//cdn.jsdelivr.net/bootstrap.tagsinput/0.4.2/bootstrap-tagsinput.css" />
<script src="//cdn.jsdelivr.net/bootstrap.tagsinput/0.4.2/bootstrap-tagsinput.min.js"></script>

<style>
	body {
		background-color: #334759;
		background-image: linear-gradient(30deg, #314456 12%, transparent 12.5%, transparent 87%, #314456 87.5%, #314456),
		linear-gradient(150deg, #314456 12%, transparent 12.5%, transparent 87%, #314456 87.5%, #314456),
		linear-gradient(30deg, #314456 12%, transparent 12.5%, transparent 87%, #314456 87.5%, #314456),
		linear-gradient(150deg, #314456 12%, transparent 12.5%, transparent 87%, #314456 87.5%, #314456),
		linear-gradient(60deg, #34495E 25%, transparent 25.5%, transparent 75%, #34495E 75%, #34495E), 
		linear-gradient(60deg, #34495E 25%, transparent 25.5%, transparent 75%, #34495E 75%, #34495E);
		background-size:80px 140px;
		background-position: 0 0, 0 0, 40px 70px, 40px 70px, 0 0, 40px 70px;
	}
	p.title-cg {
		font-size: 28px;
		line-height: 75px;
		text-transform: uppercase;
		color: #fff;
	}
	p.subtitle-cg {
		font-size: 22px;
		line-height: 60px;
		text-transform: uppercase;
		color: #fff;
	}
	
	@media (max-width: 768px) {
		p.title-cg {
			font-size: 22px;
			line-height: 32px;
		}
		p.subtitle-cg {
			font-size: 18px;
			line-height: 32px;
		}
	}
	@media screen and (min-width: 768px) {
		#taskpresenter {
			margin-bottom: -50px;
		}
	}
	.up {
		color: #2ecc71;
	}
	.down {
		color: #e74c3c;
	}
	.form-control{
		color: #000000;
	}
	.bootstrap-tagsinput {
	  background-color: #fff;
	  border: 1px solid #ccc;
	  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);
	  display: inline-block;
	  padding: 4px 6px;
	  margin-bottom: 10px;
	  color: #555;
	  vertical-align: middle;
	  border-radius: 4px;
	  max-width: 100%;
	  line-height: 22px;
	}
	.bootstrap-tagsinput .tag {
	  margin-right: 2px;
	  color: #fff;
	  background-color: #2ecc71;
	}
	.bootstrap-tagsinput input {
	  border: none;
	  box-shadow: #fff;
	  outline: #fff;
	  background-color: #fff;
	  padding: 0;
	  margin: 0;
	  width: auto !important;
	  max-width: inherit;
	}
	div#skeleton {
		margin-bottom: 20px;
	}
	div#skeleton .col-xs-6 {
		padding-left: 12px;
		padding-right: 12px;
	}
	div#skeleton-finished {
		margin-bottom: 40px;
		color: #fff;
	}
	div#logo {
		margin-top: 40px;
		margin-bottom: 40px;
	}
	#imgs-wrapper {
		margin: auto;
	}
	p.big {
		font-size: 1.3em;
	}
	div.div-thumbnail:hover {
		cursor: pointer;
	}
	img.img-thumbnail {
		border-color: #fff;
	}
	img.img-safety-up {
		background-color: #2ecc71;
		border-color: #2ecc71;
	}
	img.img-safety-down {
		background-color: #e74c3c;
		border-color: #e74c3c;
	}
	img.img-nice-up {
		background-color: #2ecc71;
		border-color: #2ecc71;
	}
	img.img-nice-down {
		background-color: #e74c3c;
		border-color: #e74c3c;
	}
	div.score {
		margin-top: 20px;
		margin-bottom: 10px;
	}
	div.separator {
		height: 23px;
	}
	.btn-rounded {
	    position: relative;
	    top: -25px;
	    width: 100px;
	    height: 100px;
		border-radius: 50%;
	    margin-bottom: -50px;
	    font-size: 28px;
	    z-index: 1;
	    background-color: #2980b9;
	    border: solid 6px #fff;
	    transition: all 1s;
	    color: #fff;
	}
	.btn-rounded:hover {
	    background-color: #3498db;
	    border: solid 6px #fff;
	}
	span.icon-cg {
		font-size: 7em;
	    transition: all 0.5s;
	    color: #fff;
	}
	span.icon-cg-up {
		font-size: 5em;
		color: #2ecc71;
	}
	span.icon-cg-up-lg {
		font-size: 4em;
		color: #2ecc71;
	}
	span.icon-cg-down {
		font-size: 5em;
		color: #e74c3c;
	}
	span.icon-cg-down-lg {
		font-size: 4em;
		color: #e74c3c;
	}
	@media(max-width: 768px) {
		span.icon-cg-down-lg,
		span.icon-cg-up-lg {
			font-size: 3em;
			line-height: 67px;
		}
	}
	div.icon-wrapper {
		position: absolute;
		text-align: center;
		width: 100%;
		top: 50%;
		margin-top: -45px;
		margin-left: -15px;
	}
	@media(max-width: 768px) {
		div.icon-wrapper {
			margin-left: -5px;
		}
	}
	.alert {
		position: fixed;
		z-index: 999;
		right: 20px;
	}
	.modal p {
		font-size: 14px;
		line-height: 16px;
	}
	.modal-sm .modal-header {
		padding: 0;
	}
	.modal-sm .modal-header .close {
		position: absolute;
		top: 5px;
		right: 8px;
		color: #fff;
		opacity: 1;
	}
	.modal-sm .modal-header img {
		border-top-left-radius: 5px;
		border-top-right-radius: 5px;
	}
	@media (min-width: 768px) {
		.modal-sm {
		  width: 450px;
		}
	}
	.modal-backdrop.in {
		opacity: 0.8;
	}
	.carousel-indicators {
		bottom: 0;
		margin-bottom: 0;
	}
	.carousel-indicators li {
		border-color: #34495E;
	}
	.carousel-indicators .active {
		background-color: #34495E;
	}
	label {
		font-weight: bold;
	}
	#userProgress {
		margin-top: 10px;
	}
</style>
<div id="taskpresenter" ng-app="TagCampinaApp" ng-controller="MainController as MainCtrl">
	<!-- Success and Error Messages for the user -->
	<div id="success" class="alert alert-success alert-dismissible" role="alert" style="display:none;">
		<span class="glyphicon glyphicon-ok"></span><strong> Sua resposta foi salva!</strong>
	</div>
	<div id="loading" class="alert alert-info alert-dismissible" role="alert" style="display:none;">
		Carregando próxima tarefa...
	</div>
	<div id="error" class="alert alert-danger alert-dismissible" role="alert" style="display:none;">
		<strong>Ops! Algo errado.</strong>
		<br/>
		<div class="alert-actions">
			<a class="btn btn-danger" href="/pybossa/project/newcomoecampina/newtask">Recarregar</a>
		</div>
	</div>
	<div id="error-tag" class="alert alert-danger alert-dismissible" role="alert" style="display:none;">
	      <strong>Ops! Parece que você não preencheu as tags ainda.</strong>
		<br/>
    	</div>
	<!-- End Success and Error Messages for the user -->

	<!-- Tutorial -->
	<div id="modalTutorial" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="Instruções" aria-hidden="true">
	  <div class="modal-dialog modal-sm">
	    <div class="modal-content" ng-init="tab = 1">
		  <!-- tab1 -->
	      <div id="tab1" ng-show="tab === 1">
		      <div class="modal-header">
		        <button type="button" class="close" data-dismiss="modal" aria-label="Fechar"><span aria-hidden="true">&times;</span></button>
		        <img src="https://contribua.org/comoecampina-static/imgs/tutorial_01.png" alt="Como é Campina" width="100%">
		      </div>
		      <div class="modal-body">
		      	<p><strong>Seja bem-vindo</strong>. Sua contribuição é muito para entendermos o que torna os locais da cidade de Campina Grande agradáveis ou seguros.</p>
		      	<div class="text-center">
		      		<button class="btn btn-default" ng-click="tab = 2">Próximo</button>
		      	</div>
		      </div>
	      </div>
	      <!--  END tab1 -->
		  <!-- tab2 -->
	      <div id="tab2" ng-show="tab === 2">
		      <div class="modal-header">
		        <button type="button" class="close" data-dismiss="modal" aria-label="Fechar"><span aria-hidden="true">&times;</span></button>
		        <img src="https://contribua.org/comoecampina-static/imgs/tutorial_02.gif" alt="" width="100%">
		      </div>
		      <div class="modal-body">
		      	<p>Para cada imagem apresentada você deverá utilizar tags para descrever aspectos da imagem que a faça ser vista como mais ou menos agradável</p>
		      	<div class="text-center">
		      		<button class="btn btn-default" ng-click="tab = 3">Próximo</button>
		      	</div>
		      </div>
	      </div>
	      <!--  END tab2 -->
		  <!-- tab3 -->
	      <div id="tab3" ng-show="tab === 3">
		      <div class="modal-header">
		        <button type="button" class="close" data-dismiss="modal" aria-label="Fechar"><span aria-hidden="true">&times;</span></button>
		        <img src="https://contribua.org/comoecampina-static/imgs/tutorial_03.gif" alt="" width="100%">
		      </div>
		      <div class="modal-body">
		      	<p>Faça o mesmo para descrever a imagem em relação à segurança</span>.</p>
		      	<div class="text-center">
		      		<button class="btn btn-default" data-dismiss="modal" aria-label="Começar">Começar</button>
		      	</div>
		      </div>
	      </div>
	      <!--  END tab3 -->

	      <div class="modal-footer">
	      	<ol class="carousel-indicators">
				<li ng-click="tab = 1" ng-class="{active:tab === 1}"></li>
				<li ng-click="tab = 2" ng-class="{active:tab === 2}"></li>
				<li ng-click="tab = 3" ng-class="{active:tab === 3}"></li>
			</ol>
	      </div>

	    </div>
	  </div>
	</div>
	<!-- END Tutorial -->

	<!-- Profile -->
	<div id="modalProfile" class="modal fade">
		<div class="modal-dialog">
			<div class="modal-content">
				<div class="modal-header">
					<h4 class="modal-title">Conte-nos um pouco mais sobre você</h4>
				</div>
				<div class="modal-body">
					<form>
						<div class="form-group">
							<label for="userage">Idade:</label>
							<input class="form-control" id="userage" type="number" min="1" max="120" step="1" name="userage" ng-model="userProfile.age">
						</div>
						<div class="form-group">
							<label for="usersex">Sexo:</label>
							<select class="form-control" id="usersex" name="usersex" ng-model="userProfile.sex">
								<option value="M">Masculino</option>  
								<option value="F">Feminino</option>  				
							</select>
						</div>
						<div class="form-group">
							<label for="userrel">Estado Civil:</label>
							<select class="form-control" id="userrel" name="userrel" ng-model="userProfile.rel">
								<option value="casado">Casado</option>
								<option value="solteiro" selected>Solteiro</option>
								<option value="divorciado">Divorciado</option>
								<option value="viuvo">Viúvo</option>
							</select>
						</div>
						<div class="form-group">
							<label for="userclass">Classe Social (renda mensal):</label>
							<select class="form-control" id="userclass" name="userclass" ng-model="userProfile.clas">
								<option value="alta">Alta (R$ 14.500 ou mais)</option>  
								<option value="media alta">Média Alta (R$ 7.250 a R$ 14.499,99)</option>  
								<option value="media" selected>Média (R$ 2.900 a R$ 7.249,99)</option>  
								<option value="media baixa">Média Baixa (R$ 1.450 a R$ 2.899,99)</option>  
								<option value="baixa">Baixa (até R$ 1.449,99)</option>
							</select>
						</div>
						<div class="form-group">
							<label for="usereduc">Grau de formação:</label>
							<select class="form-control" id="usereduc" name="usereduc" name="userclass" ng-model="userProfile.educ">
								<option value="doutorado">Doutorado</option>  
								<option value="mestrado">Mestrado</option>  
								<option value="graduacao" selected>Graduação</option>  
								<option value="ensino medio">Ensino Médio</option>  
								<option value="ensino fundamental">Ensino Fundamental</option>
							</select>
						</div>
						<div class="form-group">
							<label for="usercity">Cidade:</label>
							<input class="form-control" id="usercity" name="usercity" type="text" ng-model="userProfile.city">
						</div>
						<p>Quais desses bairros você frequenta?</p>
						<div class="form-group">
							<div class="col-sm-4" ng-repeat="item in neighborhood">
								<div class="checkbox">
									<label for="{{item.id}}">
										<input class="form-control" type="checkbox" id="{{item.id}}" name="{{item.id}}" ng-model="check" ng-change="setNeighborhood(check, item.id)"> {{item.name}}
									</label>
								</div>
							</div>
						</div>
					</form>
				</div>
				<div class="modal-footer">
					<button type="button" class="btn btn-primary" data-dismiss="modal">Continuar</button>
				</div>
			</div>
		</div>
	</div><!-- /.modal -->
	<!-- END Profile -->

	<!-- Task skeleton -->
	<div id="skeleton">
		<div class="score" ng-style="readyToAnswer() && {'visibility': 'hidden'} || {'visibility': 'visible'}">
			<div class="row" ng-show="isSelectingSafety()" align="center">
				<!--<div class="col-xs-2 col-sm-3 text-right">
					<span class="icon-cg-lg icon-cg-up-lg iconcg-safety-up"></span>
				</div> -->
				<div class="col-xs-10 col-sm-9">
					<p class="subtitle-cg">Você percebe esse local como <strong class="up">seguro</strong>? Ou pouco <strong class="down">seguro</strong>?</p>
				</div>
			</div>
			<div class="row" ng-hide="isSelectingSafety()" align="center">
				<!--<div class="col-xs-2 col-sm-3 text-right">
					<span class="icon-cg-lg icon-cg-up-lg iconcg-nice-up"></span>
				</div> -->
				<div class="col-xs-10 col-sm-9">
					<p class="subtitle-cg">Você percebe esse local como <strong class="up">agradável</strong>? Ou pouco <strong class="down">agradável</strong>?</p>
				</div>
			</div>
		</div>
		<div id="imgs-wrapper" resize ng-style="style()">
			<div class="row">
				<div
					id="imgA"
					class="col-xs-6 col-lg-8 col-lg-offset-2 div-thumbnail"
					ng-click="select(task.info.url_a)">
					<img
						class="img-thumbnail" width="200%" alt=""
						ng-src="{{task.info.url_a}}"
						ng-class="isSelected(task.info.url_a)">
				</div>
			</div>
		</div>
	</div>

	<div id="skeleton-tags">
		<div id="matching-tags" class="row">
			<div class="col-xs-11 col-sm-10">
				<p class="subtitle-cg">Forneça até 3 tags que justifiquem sua percepção (separe as tags por vírgula!)</p>
			</div>
		</div>
		<div id="matching-tags" class="row" align="center">
			<form id="tags-form">
				<input type="text" id="tags" name="tags" class="form-control" value="" data-role="tagsinput" placeholder="Adicione sua tag" />
			</form>	
		</div>
		<!--<div id="unique-tags" class="row">
			<div class="col-xs-10 col-sm-9">
				<p class="subtitle-cg">Forneça até 3 tags que você acredita que outras pessoas ainda não utilizaram!</p>
			</div>
			<input type="text" id="unique1"> <input type="text" name="unique2"> <input type="text" name="unique3">
		</div> -->
	</div>

	<br>
	<br>

	<div id="skeleton-end" align="right" class="row">
		<button type="button" ng-click="saveTask()" class="btn btn-primary" data-dismiss="modal">Próxima Foto!</button>
	</div>

	<br>

	<!-- END Task skeleton -->
	<!-- Task skeleton finished -->
	<div id="skeleton-finished" class="text-center" style="display:none;">
		<div class="row">
			<div id="logo" class="col-xs-10 col-xs-offset-1 col-sm-8 col-sm-offset-2 col-md-6 col-md-offset-3 col-lg-4 col-lg-offset-4">
				<img src="https://contribua.org/comoecampina-static/imgs/logo.png" alt="Campina Tag" width="100%">
			</div>
		</div>
		<p class="big">Parabéns! Você completou todas as tarefas.</p>
		<p>Mas esse projeto ainda precisa de sua ajuda.<br>Ajude-nos a divulgar o projeto.</p>
		<p class="big">
			<a href="https://twitter.com/intent/tweet?text=Ajude a melhorar Campina avaliando fotos da cidade&url=https://contribua.org/pybossa/project/CampinaTags&original_referer=" target="_blank"><span class="icon icon-twitter"></span></a>
			&nbsp;&nbsp;
			<a href="https://www.facebook.com/sharer/sharer.php?u=https://contribua.org/pybossa/project/CampinaTags" target="_blank"><span class="icon icon-facebook"></span></a>
			&nbsp;&nbsp;
			<a href="https://plus.google.com/share?url=https://contribua.org/pybossa/project/CampinaTags" target="_blank"><span class="icon icon-google-plus"></span></a>
		</p>
	</div>

	<!-- User progress -->
	<div id="others-controls">
		<div class="row">
			<div id="userProgress" class="col-lg-10 col-lg-offset-1">
				<div class="progress">
					<div class="progress-bar progress-bar-success" role="progressbar" aria-valuenow="{{userProgress.done}}" aria-valuemin="0" aria-valuemax="{{userProgress.total}}" ng-style="{'width': (userProgress.progress | number : 2) + '%'}">
						<span class="sr-only">{{userProgress.progress | number : 2}}%</span>
					</div>
				</div>
			</div>
		</div>
		<div class="row">
			<div class="col-lg-10 col-lg-offset-1 text-right">
			              <a href="#" class="btn btn-link btn-sm" data-toggle="modal" data-target="#modalTutorial" ng-click="tab = 1"><font size="5">Ajuda</font></a>
			</div>
		</div>
	</div>
	<!-- END User progress -->
</div>

<!-- END ALL -->
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.7/angular.min.js"></script>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.7/angular-cookies.js"></script>
<script src="https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=places"></script>

<script>
	var apiUrl = 'https://contribua.org/pybossa/api/';
	var projectId = '565';
	var formProfileStep = 1;
	var app = angular.module('TagCampinaApp', ['ngCookies']);

	var resetTags = function() {
			//Controlling maximum of tags!
			//var inputFields = $('input');
			//for (i = inputFields.length; i >= 0; i--) {
			//	if(inputFields[i].id == "tags"){
			//		inputFields[i].tagsinput({
			//			  maxTags: 3,
			//			  minTags: 1
			//		});	
			//		break;
			//	}	
			//}
			$('#tags').tagsinput({
				  maxTags: 3
			});
			$('#tags').tagsinput('removeAll');
	}

	app.controller('MainController', ['$scope', '$http', '$cookies', function($scope, $http, $cookies) {
		$scope.userProgress = {
			user_id: '',
			total: 0,
			done: 0,
			progress: 0 
		}
		$scope.userProfile = {
			age: '',
			sex: '',
			rel: '',
			clas: '',
			educ: '',
			city: '',
			neig: []
		}
		$scope.shouldSaveProfile = false;
		$scope.neighborhood = [
			{
				id: 'cen',
				name: 'Centro'
			},
			{
				id: 'lib',
				name: 'Liberdade'
			},
			{
				id: 'cat',
				name: 'Catolé'
			}
		];
		$scope.setNeighborhood = function(add, item) {
			if (add) {
				$scope.userProfile.neig.push(item)
			} else {
				for (var i=0; i < $scope.userProfile.neig.length; i++) {
					if ($scope.userProfile.neig[i] == item) {
						$scope.userProfile.neig.splice(i, 1);
					}
				}
			}
		};

		var showTutorial = function() {
  			var hasDisplayedTutorial = $cookies.get('cg-tutorial');
  			if (typeof hasDisplayedTutorial == "undefined") {
    				$cookies.put('cg-tutorial', 'true');
				$('#modalTutorial').modal();
	    		} else {
	    			return;
	    		}
		}
		var showProfileForm = function() {
			$('#modalProfile').modal();
		}
		var getUserProfile = function() {
			var foundInPrevious = false;
			if (!foundInPrevious){//Profile not found in previous version, searching at task-run
				var finishTime;
				var offset = 0;
				$http.get(apiUrl+'taskrun?project_id='+projectId+'&user_id='+$scope.userProgress.user_id+'&offset='+offset).then(function(response) {
					var i;
					if (response.data.length !== 0) {
						for (i = 0; i < response.data.length; i++) {
							var currentData = response.data[i];
							// Checks if already have any profile data
							if (typeof currentData.info.userProfile != "undefined" && currentData.info.userProfile != '') {
								alert("Age " + currentData.info.userProfile.age);
								var currentFinishTime = new Date(currentData.finish_time);
								if (finishTime == null || currentFinishTime > finishTime) {
									finishTime = currentFinishTime;
									$scope.userProfile = currentData.info.userProfile;
								}
							}
						}
					}
					// console.log($scope.userProfile);
					// Calls the form profile if still have data to fill
					// Neighborhood is not required
					alert("Scope Age " + $scope.userProfile.age);
					if ($scope.userProfile == '' || $scope.userProfile.age === '' ||
							$scope.userProfile.sex === '' ||
							$scope.userProfile.rel === '' ||
							$scope.userProfile.clas === '' ||
							$scope.userProfile.educ === '' ||
							$scope.userProfile.city === '') {
						$scope.shouldSaveProfile = true;
						showProfileForm();
					} else {
						$scope.shouldSaveProfile = false;
					}
				});
			}
			return;
		}

		var getUserProgress = function() {
			// console.log('Loading user progress...');
			$http.get(apiUrl+'project/'+projectId+'/userprogress')
				.then(function(response) {
					$scope.userProgress.user_id = response.data.user_id;
					$scope.userProgress.total = response.data.total;
					$scope.userProgress.done = response.data.done;
					$scope.userProgress.progress = ($scope.userProgress.total === 0) ? 0 : ($scope.userProgress.done*100)/$scope.userProgress.total;
					// console.log($scope.userProgress);

					// Get user profile (10 steps)
					if ($scope.userProgress.done > 0 && $scope.userProgress.done % formProfileStep === 0) {
						getUserProfile();
					}
				}, function getUserProgressErrorCallback(response) {
					console.log('Request failed');
					$('#error').show();
					$('#skeleton').hide();
				});
		}

		var newTask = function() {
			getUserProgress();
			// console.log('Loading task...');
			$('#loading').fadeIn();
			$http.get(apiUrl+'project/'+projectId+'/newtask')
				.then(function(response) {
					// Checks if theres no more tasks for the user
					if (typeof response.data.id != 'undefined') {
						$('#loading').hide();
						$scope.task = response.data;
						console.log('Loaded task '+$scope.task.id+' '+$scope.task.info.question);
						$scope.answer = {
							question: $scope.task.info.question,
							userProfile: '',
							tags: ''
						}
						$scope.isSelectingSafety = function() {
							return ($scope.task.info.question === 'seguro');
						}
						$scope.saveTask = function() {
							if ($scope.shouldSaveProfile === true) {
								$scope.userProfile.city = document.getElementById("usercity").value;
								$scope.answer.userProfile = $scope.userProfile;
								$scope.shouldSaveProfile = false;
							}
							//For validation: document.getElementsByClassName("tag label label-info")[5].innerHTML
							//Retrieving tags!
							var tagsResult = $("#tags").tagsinput('items');
							var tags = [];
							for (i = tagsResult.length; i >= 0; i--) {
								if (typeof tagsResult[i] != "undefined"){//&& typeof tagsResult[i].isSelect == "undefined"
									if (tagsResult[i].length > 0 && tagsResult[i][0] != "on"){
										console.log(i + " " + tagsResult[i]);
										tags = tags.concat(tagsResult[i]);
									}
								}
							}

							//Replacing tags field to avoid redraw!
							//var parent = document.getElementById("tags-form");
							//var childToReplace;
							//var toRemove = parent.childNodes.length;
							//for (child in parent.childNodes) {
						//		if (child.length == undefined && child.id == "tags"){
						//			childToReplace = child;
						//		}
					//		}
							//for (i = 0; i < toRemove; i++){
							//	parent.removeChild(parent.childNodes[0]);
							//}
							//var input = document.createElement("input");
							//input.type = "text";
							//input.id = "tags";
							//input.name = "tags";
							//input.className = "form-control"; // set the CSS class
							//input.setAttribute("data-role", "tagsinput");
							//input.setAttribute("value", "Hanoi");
							//parent.appendChild(input);
							resetTags();
							//$('input').tagsinput('removeAll');
							//<input type="text" id="tags" class="form-control" value="Hanoi" data-role="tagsinput" >

							//Tags filled, so save task answer!
							alert("Tags " + tags.length);
							if(tags.length > 0){
								$scope.answer.tags = tags.join("-");
								var taskrun = {
								'project_id': $scope.task.project_id,
								'task_id': $scope.task.id,
								'info': $scope.answer//CHANGE GET INPUT FIELDS AND SAVE IN THE DB!
								};
								taskrun = JSON.stringify(taskrun);

								console.log(taskrun);
								alert("TAGS ANSWER "+$scope.answer.tags);

								$http.post(apiUrl+'taskrun', taskrun).then(function(response) {
									// console.log('Saved!');
									$("#skeleton").fadeOut(0);
									$("#success").fadeIn();
									// After save, calls a new task again
									newTask();
									$("#skeleton").fadeIn(1000);
									setTimeout(function() { $("#success").fadeOut() }, 1000);
								}, function saveTaskErrorCallback(response) {
									$('#error').show();
								});
							}else{
								$('#error-tag').show();
								setTimeout(function() { $("#error-tag").fadeOut() }, 1000);
							}
						}
					} else {
						$('#skeleton').hide();
						$('#loading').hide();
						$('#skeleton-finished').show();
						$('#others-controls').hide();
						$('.row .col-md-12 p').hide();
					}
				}, function newTaskErrorCallback(response) {
					console.log('Request failed');
					$('#error').show();
					$('#skeleton').hide();
				});
			}
			newTask();
			showTutorial();
		}]);

	app.directive('resize', function ($window) {
	    return function (scope, element) {
	        var w = angular.element($window);
	        scope.getWindowDimensions = function () {
	            return {
	                'h': w.height(),
	                'w': w.width()
	            };
	        };
	        scope.$watch(scope.getWindowDimensions, function (newValue, oldValue) {
	            scope.windowWidth = newValue.w;
	            scope.windowHeight = newValue.h;

	            scope.viewportWidth = newValue.h*1.1;

	            scope.style = function () {
	            	if (scope.windowHeight*1.1 < scope.windowWidth) {
		                return {
	                        'width': (scope.viewportWidth) + 'px'
		                };
	            	} else {
	            		return;
	            	}
	            };

	        }, true);

	        w.bind('resize', function () {
	            scope.$apply();
	        });
	    }
	});

	//Google autocomplete
	var cityInput = document.getElementById('usercity');
	var options = {
		types: ['(cities)']
	};
	var autocomplete = new google.maps.places.Autocomplete(cityInput, options);
	var pacContainerInitialized = false; 
	$('#usercity').keypress(function() { 
	    if (!pacContainerInitialized) { 
	      $('.pac-container').css('z-index', '10000'); 
	      pacContainerInitialized = true;  
	    } 
	}); 

	//Configuring max items per tag!
	resetTags();
</script>
